---
description: 
globs: 
alwaysApply: true
---
# 页面开发指南

## 数据分析页面开发 (`/analysis`)

基于设计图：[02-数据分析页面.svg](mdc:页面设计图/02-数据分析页面.svg)

### 页面结构
```vue
<template>
  <div class="analysis-page">
    <!-- 三个功能卡片区域 -->
    <div class="function-cards">
      <FileUploadCard />      <!-- 文件上传区域 -->
      <AnalysisParamsCard />  <!-- 分析参数配置 -->
      <ExecuteAnalysisCard /> <!-- 执行分析区域 -->
    </div>
    
    <!-- 文件预览区域 -->
    <FilePreviewCard />
  </div>
</template>
```

### 核心功能组件
1. **FileUploadCard** - 拖拽上传，文件验证
2. **AnalysisParamsCard** - 目标力值设置，容差配置
3. **ExecuteAnalysisCard** - 开始分析按钮，进度显示
4. **FilePreviewCard** - 数据表格预览，统计信息

### API 集成
- 文件上传: `POST /api/upload`
- 文件预览: `GET /api/preview/{filename}`
- 启动分析: `POST /api/analyze`

## 任务状态页面开发 (`/task/:taskId`)

基于设计图：[03-任务状态页面.svg](mdc:页面设计图/03-任务状态页面.svg)

### 页面结构
```vue
<template>
  <div class="task-status-page">
    <!-- 任务状态卡片 -->
    <TaskStatusCard :task="currentTask" />
    
    <!-- 任务日志区域 -->
    <TaskLogCard :taskId="taskId" />
  </div>
</template>
```

### 核心功能
1. **实时状态轮询** - 每2秒查询任务状态
2. **进度条显示** - 动态更新分析进度
3. **任务日志** - 实时更新执行日志
4. **状态指示** - 运行中/完成/失败状态

### API 集成
- 任务状态: `GET /api/task/{task_id}` (轮询)
- 任务操作: `DELETE /api/task/{task_id}` (停止任务)

## 分析结果页面开发 (`/results/:taskId`)

基于设计图：[04-分析结果页面.svg](mdc:页面设计图/04-分析结果页面.svg)

### 页面结构
```vue
<template>
  <div class="results-page">
    <!-- 结果摘要 -->
    <ResultSummaryCard :results="analysisResults" />
    
    <!-- DeepSeek AI 分析 -->
    <AIAnalysisCard :taskId="taskId" />
    
    <!-- 图表展示区域 -->
    <ChartsDisplayCard :taskId="taskId" :charts="chartsList" />
  </div>
</template>
```

### 核心功能
1. **关键指标展示** - 成功率、Cp值、质量等级等
2. **AI分析生成** - DeepSeek智能分析报告
3. **35个图表展示** - 分类标签页，图表网格
4. **文件下载** - Word报告、图表包、CSV导出

### API 集成
- 分析结果: `GET /api/results/{task_id}`
- AI分析: `POST /api/deepseek/generate-comprehensive-word-report`
- 图表获取: `GET /api/chart/{task_id}/{chart_name}`
- 报告下载: `GET /api/download-comprehensive-report/{task_id}`

## 任务管理页面开发 (`/tasks`)

基于设计图：[05-任务管理页面.svg](mdc:页面设计图/05-任务管理页面.svg)

### 页面结构
```vue
<template>
  <div class="tasks-page">
    <!-- 工具栏 -->
    <TasksToolbar />
    
    <!-- 任务列表表格 -->
    <TasksTable :tasks="tasksList" />
    
    <!-- 分页组件 -->
    <Pagination />
  </div>
</template>
```

### 核心功能
1. **任务列表展示** - 表格形式，支持批量操作
2. **状态实时更新** - 运行中任务状态轮询
3. **任务操作** - 查看/删除/重试/停止
4. **搜索筛选** - 任务ID、文件名搜索

### API 集成
- 任务列表: `GET /api/tasks`
- 删除任务: `DELETE /api/task/{task_id}`

## 系统设置页面开发 (`/settings`)

基于设计图：[06-系统设置页面.svg](mdc:页面设计图/06-系统设置页面.svg)

### 页面结构
```vue
<template>
  <div class="settings-page">
    <!-- DeepSeek AI 配置 -->
    <DeepSeekConfigCard />
    
    <!-- 分析参数默认配置 -->
    <AnalysisConfigCard />
    
    <!-- 系统信息 -->
    <SystemInfoCard />
    
    <!-- 系统操作 -->
    <SystemOperationsCard />
  </div>
</template>
```

### 核心功能
1. **AI配置管理** - API连接测试，使用统计
2. **参数默认设置** - 目标力值、容差等默认值
3. **系统信息展示** - 版本、运行状态等
4. **系统操作** - 清理缓存、备份数据等

### API 集成
- AI连接测试: `GET /api/deepseek/test-connection`
- 系统健康检查: `GET /health`

## 通用开发规范

### 组件复用
- 状态指示器组件 (运行中/完成/失败)
- 进度条组件 (任务进度显示)
- 文件信息组件 (文件名、大小、状态)
- 操作按钮组 (查看/删除/重试等)

### 状态管理
```javascript
// 使用 Pinia store
const analysisStore = useAnalysisStore()

// 任务状态轮询
const { startPolling, stopPolling } = useTaskPolling(taskId)

// 图表数据管理
const { charts, loadChart } = useCharts(taskId)
```

### 错误处理
- 统一的错误提示组件
- 网络错误重试机制
- 用户友好的错误信息显示

### 响应式设计
- 移动端适配
- 表格响应式布局
- 图表自适应尺寸

---
description: 
globs: 
alwaysApply: true
---
# 组件设计模式

## 布局组件规范

### 主布局组件 (MainLayout)
基于设计图：[01-主界面布局.svg](mdc:页面设计图/01-主界面布局.svg)

```vue
<template>
  <el-container class="main-layout">
    <!-- 顶部导航栏 -->
    <el-header class="main-header">
      <div class="header-left">
        <h1>压力采集数据分析系统</h1>
      </div>
      <div class="header-right">
        <el-button>主题切换</el-button>
        <el-button>用户设置</el-button>
      </div>
    </el-header>
    
    <el-container>
      <!-- 侧边栏 -->
      <el-aside class="main-sidebar" width="200px">
        <SidebarMenu />
        <SystemStatus />
      </el-aside>
      
      <!-- 主内容区 -->
      <el-main class="main-content">
        <router-view />
      </el-main>
    </el-container>
  </el-container>
</template>
```

### 侧边栏菜单组件 (SidebarMenu)
```vue
<template>
  <el-menu :default-active="activeIndex" router>
    <el-menu-item index="/analysis">
      <el-icon><Document /></el-icon>
      <span>数据分析</span>
    </el-menu-item>
    <el-menu-item index="/tasks">
      <el-icon><List /></el-icon>
      <span>任务管理</span>
    </el-menu-item>
    <!-- 其他菜单项... -->
  </el-menu>
</template>
```

## 卡片组件规范

### 基础卡片组件 (BaseCard)
```vue
<template>
  <el-card class="base-card" :shadow="shadow">
    <template #header v-if="title || $slots.header">
      <div class="card-header">
        <span class="card-title">{{ title }}</span>
        <slot name="header" />
      </div>
    </template>
    
    <div class="card-content">
      <slot />
    </div>
    
    <template #footer v-if="$slots.footer">
      <div class="card-footer">
        <slot name="footer" />
      </div>
    </template>
  </el-card>
</template>
```

### 文件上传卡片组件 (FileUploadCard)
```vue
<template>
  <BaseCard title="上传文件">
    <el-upload
      class="upload-area"
      drag
      :auto-upload="false"
      :on-change="handleFileChange"
      accept=".csv"
    >
      <el-icon class="el-icon--upload"><upload-filled /></el-icon>
      <div class="el-upload__text">
        拖拽文件到此处<em>或点击选择文件</em>
      </div>
      <template #tip>
        <div class="el-upload__tip">
          支持CSV格式，最大100MB
        </div>
      </template>
    </el-upload>
    
    <template #footer>
      <el-button type="primary" @click="uploadFile">浏览文件</el-button>
    </template>
  </BaseCard>
</template>
```

## 状态组件规范

### 任务状态指示器 (TaskStatusIndicator)
```vue
<template>
  <div class="status-indicator">
    <el-tag
      :type="statusType"
      :icon="statusIcon"
      :effect="effect"
    >
      {{ statusText }}
    </el-tag>
  </div>
</template>

<script setup>
const props = defineProps({
  status: {
    type: String,
    required: true,
    validator: (value) => ['pending', 'running', 'completed', 'failed'].includes(value)
  }
})

const statusConfig = {
  pending: { type: 'info', icon: Clock, text: '等待中' },
  running: { type: 'warning', icon: Loading, text: '运行中' },
  completed: { type: 'success', icon: CircleCheck, text: '已完成' },
  failed: { type: 'danger', icon: CircleClose, text: '失败' }
}
</script>
```

### 进度条组件 (ProgressBar)
```vue
<template>
  <div class="progress-container">
    <div class="progress-info">
      <span>{{ label }}</span>
      <span class="progress-percentage">{{ percentage }}%</span>
    </div>
    <el-progress
      :percentage="percentage"
      :status="status"
      :stroke-width="strokeWidth"
      :show-text="false"
    />
    <div class="progress-detail" v-if="detail">
      {{ detail }}
    </div>
  </div>
</template>
```

## 数据展示组件规范

### 数据表格组件 (DataTable)
```vue
<template>
  <div class="data-table">
    <el-table
      :data="tableData"
      :loading="loading"
      stripe
      border
      height="400"
    >
      <el-table-column
        v-for="column in columns"
        :key="column.prop"
        :prop="column.prop"
        :label="column.label"
        :width="column.width"
        :formatter="column.formatter"
      />
    </el-table>
    
    <el-pagination
      v-if="showPagination"
      v-model:current-page="currentPage"
      v-model:page-size="pageSize"
      :total="total"
      :page-sizes="[10, 20, 50, 100]"
      layout="total, sizes, prev, pager, next, jumper"
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
    />
  </div>
</template>
```

### 统计卡片组件 (StatCard)
```vue
<template>
  <el-card class="stat-card" :class="cardClass">
    <div class="stat-content">
      <div class="stat-value">{{ value }}</div>
      <div class="stat-label">{{ label }}</div>
    </div>
    <div class="stat-icon" v-if="icon">
      <el-icon :size="32"><component :is="icon" /></el-icon>
    </div>
  </el-card>
</template>
```

## 图表组件规范

### 图表容器组件 (ChartContainer)
```vue
<template>
  <BaseCard :title="title">
    <div class="chart-wrapper">
      <div ref="chartRef" class="chart-content" :style="chartStyle"></div>
      <div v-if="loading" class="chart-loading">
        <el-icon class="is-loading"><Loading /></el-icon>
        <span>图表加载中...</span>
      </div>
    </div>
    
    <template #footer>
      <div class="chart-actions">
        <el-button size="small" @click="downloadChart">下载图表</el-button>
        <el-button size="small" @click="viewFullscreen">全屏查看</el-button>
      </div>
    </template>
  </BaseCard>
</template>
```

### 图表网格组件 (ChartsGrid)
```vue
<template>
  <div class="charts-grid">
    <el-tabs v-model="activeTab" @tab-click="handleTabClick">
      <el-tab-pane
        v-for="category in chartCategories"
        :key="category.key"
        :label="category.label"
        :name="category.key"
      >
        <div class="charts-container">
          <div
            v-for="chart in category.charts"
            :key="chart.name"
            class="chart-item"
          >
            <ChartThumbnail
              :chart="chart"
              @click="showChart(chart)"
            />
          </div>
        </div>
      </el-tab-pane>
    </el-tabs>
  </div>
</template>
```

## 表单组件规范

### 分析参数表单 (AnalysisParamsForm)
```vue
<template>
  <el-form
    ref="formRef"
    :model="form"
    :rules="rules"
    label-width="120px"
  >
    <el-form-item label="目标力值(N)" prop="targetForces">
      <el-input
        v-model="form.targetForces"
        placeholder="例如: 5, 25, 50"
      />
    </el-form-item>
    
    <el-form-item label="绝对容差" prop="absoluteTolerance">
      <el-input-number
        v-model="form.absoluteTolerance"
        :min="0"
        :step="0.1"
        :precision="2"
      />
    </el-form-item>
    
    <el-form-item label="百分比容差" prop="percentageTolerance">
      <el-input-number
        v-model="form.percentageTolerance"
        :min="0"
        :max="100"
        :step="1"
        :precision="1"
      />
      <span style="margin-left: 8px;">%</span>
    </el-form-item>
  </el-form>
</template>
```

## 通用组件规范

### 操作按钮组 (ActionButtons)
```vue
<template>
  <div class="action-buttons">
    <el-button
      v-for="action in actions"
      :key="action.key"
      :type="action.type"
      :size="action.size || 'default'"
      :icon="action.icon"
      :loading="action.loading"
      :disabled="action.disabled"
      @click="handleAction(action)"
    >
      {{ action.label }}
    </el-button>
  </div>
</template>
```

### 确认对话框 (ConfirmDialog)
```vue
<template>
  <el-dialog
    v-model="visible"
    :title="title"
    width="30%"
    :before-close="handleClose"
  >
    <div class="dialog-content">
      <el-icon class="dialog-icon" :class="iconClass">
        <component :is="icon" />
      </el-icon>
      <div class="dialog-message">{{ message }}</div>
    </div>
    
    <template #footer>
      <span class="dialog-footer">
        <el-button @click="handleCancel">取消</el-button>
        <el-button type="primary" @click="handleConfirm">确认</el-button>
      </span>
    </template>
  </el-dialog>
</template>
```

## 组件开发最佳实践

### 1. 组件命名规范
- 使用 PascalCase 命名
- 组件名应该描述其功能
- 避免过于通用的名称

### 2. Props 设计
- 使用明确的类型定义
- 提供默认值和验证器
- 保持 Props 的简洁性

### 3. 事件命名
- 使用 kebab-case 命名
- 事件名应该描述发生的行为
- 提供有意义的事件数据

### 4. 插槽使用
- 提供具名插槽增加灵活性
- 使用作用域插槽传递数据
- 为插槽提供默认内容

### 5. 样式规范
- 使用 CSS 模块或 scoped 样式
- 支持主题定制
- 保持响应式设计

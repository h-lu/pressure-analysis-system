---
description: 
globs: 
alwaysApply: true
---
# 压力系统前端架构规则

## 系统概述

这是一个基于 FastAPI + Vue 3 的压力采集数据分析系统，集成了 R 统计分析引擎和 DeepSeek AI 智能分析。

参考设计文档：[frontend_redesign_spec.md](mdc:frontend_redesign_spec.md)

## 技术栈规范

### 核心技术
- **前端框架**: Vue 3 + Composition API
- **构建工具**: Vite
- **UI 组件库**: Element Plus
- **状态管理**: Pinia
- **路由管理**: Vue Router
- **HTTP 客户端**: Axios
- **图表库**: ECharts

### 项目结构
```
src/
├── api/              # API 服务层
├── components/       # 通用组件
├── views/           # 页面组件
├── stores/          # Pinia 状态管理
├── router/          # 路由配置
├── utils/           # 工具函数
└── assets/          # 静态资源
```

## 核心页面架构

### 主要路由页面
1. `/analysis` - 数据分析主页面 (参考: [02-数据分析页面.svg](mdc:页面设计图/02-数据分析页面.svg))
2. `/task/:taskId` - 任务状态监控页面 (参考: [03-任务状态页面.svg](mdc:页面设计图/03-任务状态页面.svg))
3. `/results/:taskId` - 分析结果展示页面 (参考: [04-分析结果页面.svg](mdc:页面设计图/04-分析结果页面.svg))
4. `/tasks` - 任务管理页面 (参考: [05-任务管理页面.svg](mdc:页面设计图/05-任务管理页面.svg))
5. `/history` - 历史记录页面
6. `/files` - 文件管理页面
7. `/settings` - 系统设置页面 (参考: [06-系统设置页面.svg](mdc:页面设计图/06-系统设置页面.svg))

### 主界面布局
采用侧边栏 + 主内容区布局 (参考: [01-主界面布局.svg](mdc:页面设计图/01-主界面布局.svg))
- 顶部导航栏：系统标题 + 用户操作
- 左侧边栏：导航菜单 + 系统状态
- 主内容区：动态路由页面

## API 集成规范

### API 服务层设计
```javascript
// api/analysis.js - 分析任务相关
export const analysisAPI = {
  uploadFile: (file) => POST('/api/upload', file),
  startAnalysis: (params) => POST('/api/analyze', params),
  getTaskStatus: (taskId) => GET(`/api/task/${taskId}`),
  getResults: (taskId) => GET(`/api/results/${taskId}`)
}

// api/deepseek.js - AI 分析相关
export const deepseekAPI = {
  generateReport: (taskId) => POST(`/api/deepseek/generate-comprehensive-word-report`, { task_id: taskId }),
  getAnalysis: (taskId) => GET(`/api/deepseek/get/${taskId}`),
  downloadReport: (taskId) => GET(`/api/download-comprehensive-report/${taskId}`)
}
```

### 后端 API 端点
- **文件管理**: `/api/upload`, `/api/preview/{filename}`, `/api/list`
- **分析任务**: `/api/analyze`, `/api/task/{task_id}`, `/api/results/{task_id}`
- **AI 分析**: `/api/deepseek/generate-report`, `/api/deepseek/get/{task_id}`
- **图表获取**: `/api/chart/{task_id}/{chart_name}`

## 状态管理规范

### Pinia Store 设计
```javascript
// stores/analysis.js
export const useAnalysisStore = defineStore('analysis', {
  state: () => ({
    currentTask: null,        // 当前任务
    tasks: [],               // 任务列表
    results: {},             // 分析结果缓存
    charts: {},              // 图表数据缓存
    deepseekAnalysis: {}     // AI 分析结果缓存
  })
})
```

## 开发规范

### 组件命名
- 页面组件：PascalCase (如 `DataAnalysis.vue`)
- 通用组件：PascalCase + 功能描述 (如 `FileUploader.vue`)
- 组合式函数：use + 功能名称 (如 `useTaskPolling.js`)

### 状态管理
- 使用 Pinia 进行全局状态管理
- 页面级状态使用 `ref()` 和 `reactive()`
- API 调用统一在 stores 中处理

### 错误处理
- 统一错误处理中间件
- 用户友好的错误提示
- 失败任务支持重试机制

### 样式规范
- 使用 Element Plus 主题色彩
- 状态色彩：运行中(橙色)、完成(绿色)、失败(红色)
- 响应式设计，适配不同屏幕尺寸
